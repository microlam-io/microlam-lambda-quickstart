<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  
 <properties>
	<release.version>17</release.version>
	<exec.mainClass>com.amazonaws.services.lambda.runtime.api.client.AWSLambda</exec.mainClass>
	<lambda.handler>${package}.lambda.${lambdaName}</lambda.handler>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.resourceEncoding>UTF-8</project.build.resourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <junit.version>4.12</junit.version>
    <maven.build.timestamp.format>yyyyMMdd-HHmmss</maven.build.timestamp.format>
    <aws.profile>${awsProfile}</aws.profile>
  </properties>

	<build>

		<plugins>
		  <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>3.11.0</version>

	        <configuration>
			  <release>${release.version}</release>
<!--
	          <source>1.8</source>
		      <target>1.8</target>
-->
	          <encoding>UTF-8</encoding>
	          <forceJavacCompilerUse>true</forceJavacCompilerUse>
	        </configuration>
	      </plugin>

		<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-jar-plugin</artifactId>
		    <version>3.3.0</version>
		    <configuration>
		        <archive>
		            <manifest>
		                <addClasspath>true</addClasspath>
		                <classpathPrefix>libs/</classpathPrefix>
		                <mainClass>${exec.mainClass}</mainClass>
		            </manifest>
		        </archive>
		        <forceCreation>true</forceCreation>
		    </configuration>
		</plugin>

		 <!-- Necessary for generating pom.properties for tests and cdk --> 
	      <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-resources-plugin</artifactId>
	        <version>3.3.1</version>
	        <configuration>
			  <propertiesEncoding>UTF-8</propertiesEncoding>
	          <!-- <propertiesEncoding>ISO-8859-1</propertiesEncoding> -->
	        </configuration>
	      </plugin>
	      
    	</plugins>
    
		<!-- Necessary for generating pom.properties for tests and cdk --> 
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
		        <includes>
		            <include>**/pom.properties</include>
		        </includes>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>
		        <excludes>
		            <exclude>**/pom.properties</exclude>
		        </excludes>
            </testResource>
        </testResources>

	</build>


  <dependencyManagement>
    <dependencies>
 
	<dependency>
      <groupId>io.microlam</groupId>
      <artifactId>microlam-bom</artifactId>
      <version>0.5.3</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>

  </dependencies>
  </dependencyManagement>

  <dependencies>
 
     <dependency>
      	<groupId>software.amazon.awssdk</groupId>
      	<artifactId>aws-core</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
     </dependency>

	<dependency>
        <groupId>software.amazon.awssdk</groupId>
    	<artifactId>regions</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
	</dependency>

	<dependency>
        <groupId>software.amazon.awssdk</groupId>
    	<artifactId>auth</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
	</dependency>

	<dependency>
	  	<groupId>software.amazon.awssdk</groupId>
	  	<artifactId>ssm</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
	 </dependency>

	<dependency>
    	<groupId>software.amazon.awssdk</groupId>
    	<artifactId>url-connection-client</artifactId>
    	<scope>runtime</scope>
	</dependency>

    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-events</artifactId>
   </dependency>

    <dependency>
	  <groupId>io.microlam</groupId>
  	  <artifactId>microlam-aws-lambda</artifactId>
	</dependency>

    <dependency>
	  <groupId>io.microlam</groupId>
  	  <artifactId>microlam-aws-auth</artifactId>
	</dependency>

    <dependency>
	  <groupId>io.microlam</groupId>
  	  <artifactId>microlam-params</artifactId>
	</dependency>
 
     <dependency>
	  <groupId>io.microlam</groupId>
  	  <artifactId>microlam-params-aws</artifactId>
	</dependency>
 
  	<dependency>
	    <groupId>jakarta.json</groupId>
	    <artifactId>jakarta.json-api</artifactId>
	</dependency>

	<dependency>
	    <groupId>org.eclipse.parsson</groupId>
	    <artifactId>parsson</artifactId>
	</dependency>  

    <dependency>
        <groupId>jakarta.json.bind</groupId>
        <artifactId>jakarta.json.bind-api</artifactId>
    </dependency>

   	<dependency>
        <groupId>org.eclipse</groupId>
	    <artifactId>yasson</artifactId>
	</dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    
    <dependency> 
	  <groupId>org.slf4j</groupId>
	  <artifactId>slf4j-jdk14</artifactId>
	</dependency>

    <dependency>
    	<groupId>io.microlam</groupId>
    	<artifactId>microlam-java-logging</artifactId>
	</dependency>

    <dependency>
    	<groupId>io.microlam</groupId>
    	<artifactId>microlam-json</artifactId>
	</dependency>
    
 	<dependency>
 		<groupId>org.slf4j</groupId>
 		<artifactId>log4j-over-slf4j</artifactId>
 	</dependency>
 	
 	<dependency>
	    <groupId>org.apache.logging.log4j</groupId>
	    <artifactId>log4j-api</artifactId>
	</dependency>

    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.microlam</groupId>
      <artifactId>microlam-aws-devops</artifactId>
	  <version>0.9</version>
	  <scope>test</scope>
    </dependency>

	<dependency>
        <groupId>software.amazon.awssdk</groupId>
    	<artifactId>s3</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
        <scope>test</scope>
	</dependency>

	<dependency>
        <groupId>software.amazon.awssdk</groupId>
    	<artifactId>lambda</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
        <scope>test</scope>
	</dependency>

	<dependency>
        <groupId>software.amazon.awssdk</groupId>
    	<artifactId>apigateway</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
        <scope>test</scope>
	</dependency>

	<dependency>
        <groupId>software.amazon.awssdk</groupId>
    	<artifactId>sts</artifactId>
 	  	<exclusions>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>apache-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>software.amazon.awssdk</groupId>
	            <artifactId>netty-nio-client</artifactId>
	        </exclusion>
	        <exclusion>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	        </exclusion>	        
    	</exclusions>
        <scope>test</scope>
	</dependency>

    <dependency>
        <groupId>software.amazon.awscdk</groupId>
        <artifactId>aws-cdk-lib</artifactId>
        <scope>test</scope>
    </dependency>

    <dependency>
        <groupId>software.constructs</groupId>
        <artifactId>constructs</artifactId>
        <scope>test</scope>
    </dependency>

	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<scope>test</scope>
	</dependency>
	
  </dependencies>

    <profiles>

      <profile>
        <id>java</id>
        <activation>
			<activeByDefault>true</activeByDefault>
        </activation>

		<build>
			<plugins>
				<!-- Necessary for Generating the Lambda java deployment package -->
				<plugin>
		            <artifactId>maven-assembly-plugin</artifactId>
			        <dependencies>
			          <dependency>
			            <groupId>io.microlam</groupId>
			            <artifactId>microlam-assembly-descriptor</artifactId>
			            <version>1.3</version>
			          </dependency>
			        </dependencies>
		
		            <configuration>
					  <descriptorRefs>
		                <descriptorRef>aws-lambda</descriptorRef>
		              </descriptorRefs>
		            </configuration>
		            <executions>
		                <execution>
		                    <id>aws-lambda-deployment-package-java${release.version}</id>
		                    <phase>package</phase>
		                    <goals>
		                        <goal>single</goal>
		                    </goals>
		                </execution>
		            </executions>
		        </plugin>
			</plugins>
		</build>
     </profile>

      <profile>
        <id>java20layer</id>
        <activation>
			<property><name>java20layer</name></property>
       </activation>
			<build>
				<plugins>
					<plugin>
				        <groupId>org.apache.maven.plugins</groupId>
				        <artifactId>maven-dependency-plugin</artifactId>
				        <version>3.6.0</version>
				        <executions>
				          <execution>
				            <id>copy</id>
				            <phase>package</phase>
				            <goals>
				              <goal>copy</goal>
				            </goals>
				          </execution>
				        </executions>
				        <configuration>
				          <artifactItems>
				            <artifactItem>
				              <groupId>io.microlam</groupId>
				              <artifactId>lambda-java20-layer</artifactId>
				              <version>20.0.1.9.1</version>
							  <classifier>${java20layer.arch}</classifier>
				              <type>zip</type>
				            </artifactItem>
				          </artifactItems>
				          <outputDirectory>${project.build.directory}</outputDirectory>
				          <overWriteReleases>false</overWriteReleases>
				          <overWriteSnapshots>true</overWriteSnapshots>
				        </configuration>
			      </plugin>
	    	</plugins>
	  	</build>     
	</profile>

      <profile>
        <id>java20layer-amd64</id>
        <activation>
			<property>
				<name>java20layer</name>
				<value>amd64</value>
			</property>
       </activation>

		<properties>
			<java20layer.arch>amd64</java20layer.arch>
		</properties>
	  </profile>

      <profile>
        <id>java20layer-arm64</id>
        <activation>
			<property>
				<name>java20layer</name>
				<value>arm64</value>
			</property>
       </activation>

		<properties>
			<java20layer.arch>arm64</java20layer.arch>
		</properties>
	  </profile>

       <profile>
        <id>java19layer</id>
        <activation>
			<property><name>java19layer</name></property>
       </activation>
			<build>
				<plugins>
					<plugin>
				        <groupId>org.apache.maven.plugins</groupId>
				        <artifactId>maven-dependency-plugin</artifactId>
				        <version>3.6.0</version>
				        <executions>
				          <execution>
				            <id>copy</id>
				            <phase>package</phase>
				            <goals>
				              <goal>copy</goal>
				            </goals>
				          </execution>
				        </executions>
				        <configuration>
				          <artifactItems>
				            <artifactItem>
				              <groupId>io.microlam</groupId>
				              <artifactId>lambda-java19-layer</artifactId>
				              <version>19.0.2.7.1</version>
							  <classifier>${java19layer.arch}</classifier>
				              <type>zip</type>
				            </artifactItem>
				          </artifactItems>
				          <outputDirectory>${project.build.directory}</outputDirectory>
				          <overWriteReleases>false</overWriteReleases>
				          <overWriteSnapshots>true</overWriteSnapshots>
				        </configuration>
			      </plugin>
	    	</plugins>
	  	</build>     
	</profile>

      <profile>
        <id>java19layer-amd64</id>
        <activation>
			<property>
				<name>java19layer</name>
				<value>amd64</value>
			</property>
       </activation>

		<properties>
			<java19layer.arch>amd64</java19layer.arch>
		</properties>
	  </profile>

      <profile>
        <id>java19layer-arm64</id>
        <activation>
			<property>
				<name>java19layer</name>
				<value>arm64</value>
			</property>
       </activation>

		<properties>
			<java19layer.arch>arm64</java19layer.arch>
		</properties>
	  </profile>
	  
  <profile>
        <id>native-java11-amd64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java11-amd64</value>
		 </property>
        </activation>

		<properties>
			<native.version>11</native.version>
			<native.arch>amd64</native.arch>
			<container.suffix>java11-graalvm22.3.2</container.suffix>
			<container.tag>v6</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments>--add-opens java.base/java.util=ALL-UNNAMED</native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java11-arm64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java11-arm64</value>
		 </property>
        </activation>
		<properties>
			<native.version>11</native.version>
			<native.arch>arm64</native.arch>
			<container.suffix>java11-graalvm22.3.2</container.suffix>
			<container.tag>v6</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments></native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java17-amd64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java17-amd64</value>
		 </property>
        </activation>
		<properties>
			<native.version>17</native.version>
			<native.arch>amd64</native.arch>
			<container.suffix>jdk17.0.7</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments></native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-oracle-java17-arm64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>oracle-java17-arm64</value>
		 </property>
        </activation>
		<properties>
			<native.version>17</native.version>
			<native.arch>arm64</native.arch>
			<container.suffix>oracle-jdk17.0.7</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments>-Djdk.lang.Process.launchMechanism=vfork</native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-oracle-java17-amd64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>oracle-java17-amd64</value>
		 </property>
        </activation>
		<properties>
			<native.version>17</native.version>
			<native.arch>amd64</native.arch>
			<container.suffix>oracle-jdk17.0.7</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments></native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java17-arm64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java17-arm64</value>
		 </property>
        </activation>
		<properties>
			<native.version>17</native.version>
			<native.arch>arm64</native.arch>
			<container.suffix>jdk17.0.7</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments>-Djdk.lang.Process.launchMechanism=vfork</native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java19-amd64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java19-amd64</value>
		 </property>
        </activation>
		<properties>
			<native.version>19</native.version>
			<native.arch>amd64</native.arch>
			<container.suffix>java19-graalvm22.3.1</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments></native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java19-arm64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java19-arm64</value>
		 </property>
        </activation>
		<properties>
			<native.version>19</native.version>
			<native.arch>arm64</native.arch>
			<container.suffix>java19-graalvm22.3.1</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments>-Djdk.lang.Process.launchMechanism=vfork</native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java20-amd64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java20-amd64</value>
		 </property>
        </activation>

		<properties>
			<native.version>20</native.version>
			<native.arch>amd64</native.arch>
			<container.suffix>jdk20.0.1</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments>--add-opens java.base/java.util=ALL-UNNAMED</native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-java20-arm64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>java20-arm64</value>
		 </property>
        </activation>
		<properties>
			<native.version>20</native.version>
			<native.arch>arm64</native.arch>
			<container.suffix>jdk20.0.1</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments></native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-oracle-java20-amd64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>oracle-java20-amd64</value>
		 </property>
        </activation>

		<properties>
			<native.version>20</native.version>
			<native.arch>amd64</native.arch>
			<container.suffix>oracle-jdk20.0.1</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments>--add-opens java.base/java.util=ALL-UNNAMED</native.image.arguments>
		</properties>
	  </profile>

	  <profile>
        <id>native-oracle-java20-arm64</id>
        <activation>
 		  <property>
			<name>native</name>
			<value>oracle-java20-arm64</value>
		 </property>
        </activation>
		<properties>
			<native.version>20</native.version>
			<native.arch>arm64</native.arch>
			<container.suffix>oracle-jdk20.0.1</container.suffix>
			<container.tag>v7</container.tag>
			<config.entryPoint.arguments>--add-opens java.base/java.util=ALL-UNNAMED</config.entryPoint.arguments>
			<native.image.arguments></native.image.arguments>
		</properties>
	  </profile>
	  
      <profile>
        <id>native</id>
        <activation>
 			<property><name>native</name></property>
        </activation>
		
		<dependencies>

		    <dependency>
		      <groupId>com.amazonaws</groupId>
		      <artifactId>aws-lambda-java-core</artifactId>
		    </dependency>

			<dependency>
			    <groupId>com.amazonaws</groupId>
			    <artifactId>aws-lambda-java-runtime-interface-client</artifactId>
			    <version>2.3.2</version>
			</dependency>

			<dependency>
			    <groupId>io.microlam</groupId>
				<artifactId>aws-lambda-java-runtime-interface-client-native-config</artifactId>
				<version>2.3.2_1</version>
				<classifier>java${release.version}</classifier>
			</dependency>

		</dependencies>
      </profile>

	  <profile>
        <id>config</id>
        <activation>
        	<activeByDefault>false</activeByDefault>
        </activation>

		<build>
			<plugins>
	
				<plugin>
			        <artifactId>maven-assembly-plugin</artifactId>
			        <version>3.4.0</version>
			        <configuration>
			          <descriptors>
			            <descriptor>src/assembly/native-config.xml</descriptor>
			          </descriptors>
			        </configuration>
			        <executions>
			          <execution>
			            <id>create-docker-native-config-java${native.version}-${native.arch}</id>
			            <phase>package</phase>
			            <goals>
			              <goal>single</goal>
			            </goals>
			            <configuration>
			            	<attach>false</attach>
			            </configuration>
			          </execution>
			        </executions>
			      </plugin>
			      
			    <plugin>
			        <groupId>com.soebes.maven.plugins</groupId>
			        <artifactId>echo-maven-plugin</artifactId>
			        <version>0.5.0</version>
			        <executions>
			          <execution>
			            <id>config-help</id>
			            <phase>package</phase>
			            <goals>
			              <goal>echo</goal>
			            </goals>
			            <configuration>
			              <echos>
			                <echo>Now you are ready to configure your native compilation with:</echo>
			                <echo>STEP 1: docker build --platform linux/${native.arch} ${project.build.directory}/${project.artifactId}-${project.version}-native-config/java${native.version}-${native.arch} -t ${project.artifactId}-config:latest</echo>
			                <echo>STEP 2: docker run -e AWS_PROFILE=${aws.profile} --rm -p 9000:8080 -v ${user.home}/.aws/credentials:/root/.aws/credentials -v ${project.build.directory}/${project.artifactId}-${project.version}-native-config/java${native.version}-${native.arch}/function/config:/function/config --name ${project.artifactId}-${project.version}-native-config-${maven.build.timestamp} ${project.artifactId}-config:latest</echo>
			                <echo>STEP 3: Execute your tests against your implementation, using LocalLambdaTests or curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}'</echo>
			                <echo>STEP 4: Find the generated configuration files in ${project.build.directory}/${project.artifactId}-${project.version}-native-config/java${native.version}-${native.arch}/function/config</echo>
			              </echos>
			            </configuration>
			          </execution>
			        </executions>
			    </plugin>
			    
		          <plugin>
		            <groupId>org.apache.maven.plugins</groupId>
			        <artifactId>maven-toolchains-plugin</artifactId>
			        <version>3.1.0</version>
			        <executions>
			          <execution>
			            <goals>
			              <goal>toolchain</goal>
			            </goals>
			          </execution>
			        </executions>
			        <configuration>
			          <toolchains>
			            <paths>
			              <!-- Select the "binaries" Paths Toolchain Configuration -->
			              <id>binaries</id>
			            </paths>
			          </toolchains>
			        </configuration>
			      </plugin>
      
			    <plugin>
			        <groupId>org.codehaus.mojo</groupId>
			        <artifactId>exec-maven-plugin</artifactId>
			        <version>3.1.0</version>
			        <extensions>true</extensions>
			        <executions>
			          <execution>
			            <id>config-docker-build</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
							<commandlineArgs>build --platform linux/${native.arch} ${project.build.directory}/${project.artifactId}-${project.version}-native-config/java${native.version}-${native.arch} -t ${project.artifactId}-config:latest</commandlineArgs>	
			            </configuration>
			          </execution>
			          <execution>
			            <id>config-docker-run</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
							<commandlineArgs>run -e AWS_PROFILE=${aws.profile} --rm -p 9000:8080 -v ${user.home}/.aws/credentials:/root/.aws/credentials -v ${project.build.directory}/${project.artifactId}-${project.version}-native-config/java${native.version}-${native.arch}/function/config:/function/config --name ${project.artifactId}-${project.version}-native-config-${maven.build.timestamp} ${project.artifactId}-config:latest</commandlineArgs>	
			            </configuration>
			          </execution>
			        </executions> 

					<configuration>
          				<toolchain>paths</toolchain>
          				<executable>docker</executable>
          				<useMavenLogger>false</useMavenLogger>
         			</configuration>
        		
			    </plugin>
			    
			</plugins>
		</build>
      </profile>

	  <profile>
        <id>compile</id>
        <activation>
        	<activeByDefault>false</activeByDefault>
        </activation>
		<build>
			<plugins>
			
				<plugin>
			        <artifactId>maven-assembly-plugin</artifactId>
			        <version>3.3.0</version>
			        <configuration>
			          <descriptors>
			            <descriptor>src/assembly/native-compile.xml</descriptor>
			          </descriptors>
			        </configuration>
			        <executions>
			          <execution>
			            <id>create-docker-native-compile-java${native.version}-${native.arch}</id>
			            <phase>package</phase>
			            <goals>
			              <goal>single</goal>
			            </goals>
			            <configuration>
			            	<attach>false</attach>
			            </configuration>
			          </execution>
			        </executions>
			      </plugin>


			    <plugin>
			        <groupId>com.soebes.maven.plugins</groupId>
			        <artifactId>echo-maven-plugin</artifactId>
			        <version>0.5.0</version>
			        <executions>
			          <execution>
			            <id>compile-help</id>
			            <phase>package</phase>
			            <goals>
			              <goal>echo</goal>
			            </goals>
			            <configuration>
			              <echos>
			                <echo>Now you are ready to configure your native compilation with:</echo>
			                <echo>STEP 1: docker build --platform linux/${native.arch} ${project.build.directory}/${project.artifactId}-${project.version}-native-compile/java${native.version}-${native.arch} -t ${project.artifactId}:latest</echo>
			                <echo>STEP 2: docker run -e AWS_PROFILE=${aws.profile} --attach STDOUT -p 9000:8080 -v ${user.home}/.aws/credentials:/root/.aws/credentials -v ${project.build.directory}/${project.artifactId}-${project.version}-native-compile/java${native.version}-${native.arch}:/function --name ${project.artifactId}-${project.version}-native-compile-${maven.build.timestamp} ${project.artifactId}:latest</echo>
			              </echos>
			            </configuration>
			          </execution>
			        </executions>
			    </plugin>
			    
	          <plugin>
		        <artifactId>maven-toolchains-plugin</artifactId>
		        <version>1.1</version>
		        <executions>
		          <execution>
		            <goals>
		              <goal>toolchain</goal>
		            </goals>
		          </execution>
		        </executions>
		        <configuration>
		          <toolchains>
		            <paths>
		              <!-- Select the "binaries" Paths Toolchain Configuration -->
		              <id>binaries</id>
		            </paths>
		          </toolchains>
		        </configuration>
		      </plugin>
      
			    <plugin>
			        <groupId>org.codehaus.mojo</groupId>
			        <artifactId>exec-maven-plugin</artifactId>
			        <version>3.1.0</version>
			        <extensions>true</extensions>
			        <executions>
			          <execution>
			            <id>compile-docker-build</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
							<commandlineArgs>build --platform linux/${native.arch} ${project.build.directory}/${project.artifactId}-${project.version}-native-compile/java${native.version}-${native.arch} -t ${project.artifactId}:latest</commandlineArgs>	
			            </configuration>
			          </execution>
			          <execution>
			            <id>compile-docker-run</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
							<commandlineArgs>run -e AWS_PROFILE=${aws.profile} --rm -p 9000:8080 -v ${user.home}/.aws/credentials:/root/.aws/credentials -v ${project.build.directory}/${project.artifactId}-${project.version}-native-compile/java${native.version}-${native.arch}/function/out:/function/out ${project.artifactId}:latest</commandlineArgs>	
			            </configuration>
			          </execution>
			          <execution>
			            <id>copy-artifact-to-target</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
			            	<executable>cp</executable>
							<commandlineArgs>${project.build.directory}/${project.artifactId}-${project.version}-native-compile/java${native.version}-${native.arch}/function/out/${project.artifactId}-${project.version}-aws-lambda-native.zip ${project.build.directory}</commandlineArgs>	
			            </configuration>
			          </execution>
			        </executions> 
			        
					<configuration>
          				<toolchain>paths</toolchain>
          				<executable>docker</executable>
          				<useMavenLogger>false</useMavenLogger>
        			</configuration>
        		
			    </plugin>
			    
			   <plugin>
		        <groupId>org.codehaus.mojo</groupId>
		        <artifactId>build-helper-maven-plugin</artifactId>
		        <version>3.3.0</version>
		        <executions>
		          <execution>
		            <id>attach-artifacts-java${native.version}-${native.arch}</id>
		            <phase>verify</phase>
		            <goals>
		              <goal>attach-artifact</goal>
		            </goals>
		            <configuration>
		              <artifacts>
		                <artifact>
		                  <file>${project.build.directory}/${project.artifactId}-${project.version}-aws-lambda-native.zip</file>
		                  <type>zip</type>
		                  <classifier>aws-lambda-native</classifier>
		                </artifact>
		             </artifacts>
		            </configuration>
		          </execution>
		        </executions>
		      </plugin>

			</plugins>
		</build>

      </profile>

	  <profile>
        <id>run</id>
        <activation>
        	<activeByDefault>false</activeByDefault>
        </activation>

		<build>
			<plugins>
		      
			      <plugin>
			        <artifactId>maven-resources-plugin</artifactId>
			        <version>3.3.0</version>
			        <executions>
			          <execution>
			            <id>copy-resources</id>
			            <phase>package</phase>
			            <goals>
			              <goal>copy-resources</goal>
			            </goals>
			            <configuration>
			              <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}-native-run/java${native.version}-${native.arch}</outputDirectory>
			              <resources>          
			                <resource>
			                  <directory>src/docker/native-run</directory>
			                  <filtering>true</filtering>
			                </resource>
			              </resources>              
			            </configuration>            
			          </execution>
			        </executions>
			      </plugin>
      
			     <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>3.1.0</version>
					<executions>
					    <execution>
					        <id>Unzip aws-lambda-native zip</id>
					        <phase>package</phase>
					        <configuration>
					            <target>
					                <unzip src="${project.build.directory}/${project.artifactId}-${project.version}-aws-lambda-native.zip" dest="${project.build.directory}/${project.artifactId}-${project.version}-native-run/java${native.version}-${native.arch}/function"/>
					            </target>
					        </configuration>
					        <goals>
					            <goal>run</goal>
					        </goals>
					    </execution>
					</executions>
				</plugin>
				
			    <plugin>
			        <groupId>com.soebes.maven.plugins</groupId>
			        <artifactId>echo-maven-plugin</artifactId>
			        <version>0.5.0</version>
			        <executions>
			          <execution>
			            <id>run-help</id>
			            <phase>package</phase>
			            <goals>
			              <goal>echo</goal>
			            </goals>
			            <configuration>
			              <echos>
			                <echo>Now you are ready to run your native compilation with:</echo>
			                <echo>STEP 1: docker build --platform linux/${native.arch} ${project.build.directory}/${project.artifactId}-${project.version}-native-run/java${native.version}-${native.arch} -t ${project.artifactId}-run:latest</echo>
			                <echo>STEP 2: docker run -e AWS_PROFILE=${aws.profile}  --rm -p 9000:8080 -v ${user.home}/.aws/credentials:/root/.aws/credentials --name ${project.artifactId}-${project.version}-native-run-${maven.build.timestamp} ${project.artifactId}-run:latest</echo>
			                <echo>STEP 3: Execute your tests against your implementation, using LocalLambdaTests or curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}'</echo>
			                <echo>STEP 4: Find the generated configuration files in ${project.build.directory}/${project.artifactId}-${project.version}-native-config/java${native.version}-${native.arch}/function/config</echo>
			              </echos>
			            </configuration>
			          </execution>
			        </executions>
			    </plugin>

		          <plugin>
			        <artifactId>maven-toolchains-plugin</artifactId>
			        <version>1.1</version>
			        <executions>
			          <execution>
			            <goals>
			              <goal>toolchain</goal>
			            </goals>
			          </execution>
			        </executions>
			        <configuration>
			          <toolchains>
			            <paths>
			              <!-- Select the "binaries" Paths Toolchain Configuration -->
			              <id>binaries</id>
			            </paths>
			          </toolchains>
			        </configuration>
			      </plugin>
      
			    <plugin>
			        <groupId>org.codehaus.mojo</groupId>
			        <artifactId>exec-maven-plugin</artifactId>
			        <version>3.1.0</version>
			        <extensions>true</extensions>
			        <executions>
			          <execution>
			            <id>run-docker-build</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
							<commandlineArgs>build --platform linux/${native.arch} ${project.build.directory}/${project.artifactId}-${project.version}-native-run/java${native.version}-${native.arch} -t ${project.artifactId}-run:latest</commandlineArgs>	
			            </configuration>
			          </execution>
			          <execution>
			            <id>run-docker-run</id>
			            <phase>package</phase>
			            <goals>
			              <goal>exec</goal>
			            </goals>
			            <configuration>
							<commandlineArgs>run -e AWS_PROFILE=${aws.profile} --rm -p 9000:8080 -v ${user.home}/.aws/credentials:/root/.aws/credentials --name ${project.artifactId}-${project.version}-native-run-${maven.build.timestamp} ${project.artifactId}-run:latest</commandlineArgs>	
			            </configuration>
			          </execution>
			        </executions> 
					<configuration>
          				<toolchain>paths</toolchain>
          				<executable>docker</executable>
          				<useMavenLogger>false</useMavenLogger>
         			</configuration>
        		
			    </plugin>
			    
			</plugins>
		</build>
      </profile>
   </profiles>
</project>